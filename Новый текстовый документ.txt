import sqlite3
import discord
from discord.ext import commands
from datetime import datetime, date
import os
from discord.ui import Button, View
import botwo
import botthree  # Импортируем файл botthree.py

allow_same_day = False


def get_db_connection():
    conn = sqlite3.connect('reminders.db')
    return conn

# Initialize database
def initialize_db():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            info TEXT,
            user_id INTEGER
        );
    ''')
    conn.commit()
    conn.close()


initialize_db()

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

bot.load_extension('botthree')
botthree.setup(bot)

botwo.setup(bot)

waiting_for_input = {}

@bot.event
async def on_ready():
    print(f'Бот {bot.user} успешно запущен и готов к работе!')

@bot.command(name='restart', aliases=['рестарт'])
@commands.has_permissions(administrator=True)
async def restart(ctx):
    await ctx.send("Restart...")
    await bot.close()
    os.system('python bot.py')

@bot.command(name='request', aliases=['запрос'])
async def request(ctx):
    await ctx.send("Напиши свой возраст, You age:")
    waiting_for_input[ctx.author.id] = 'age_input'

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.author.id in waiting_for_input:
        action = waiting_for_input.pop(message.author.id)
        conn = get_db_connection()
        c = conn.cursor()
        try:
            if action == 'delete_id':
                message_id = int(message.content)
                c.execute("DELETE FROM reminders WHERE id = ?", (message_id,))
                if c.rowcount > 0:
                    conn.commit()
                    await message.channel.send(f"Запись с id {message_id} удалена. Recording with id {message_id} deleted.")
                    await list(message.channel)  # Show updated list
                else:
                    await message.channel.send(f"Запись с id {message_id} не найдена. Recording with id {message_id} not found.")
            elif action == 'age_input':
                age = int(message.content)
                await message.channel.send(f"Ты большой! Твой возраст: {age}. You big! Your age: {age}.")
            elif action == 'delete_user':
                user_id = int(message.content)
                c.execute("DELETE FROM reminders WHERE user_id = ?", (user_id,))
                conn.commit()
                rows_deleted = c.rowcount
                if rows_deleted > 0:
                    await message.channel.send(f"Все записи пользователя с ID {user_id} были удалены. Удалено {rows_deleted} записей. All recording a user with an id {user_id} deleted. Deleted {rows_deleted} recording.")
                    await list(message.channel)
                else:
                    await message.channel.send(f"Записей пользователя с ID {user_id} не найдено. Recording a user with an id {user_id} not found.")
            elif action == 'delete_date':
                date_str = message.content
                date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
                c.execute("DELETE FROM reminders WHERE date = ?", (date_obj,))
                conn.commit()
                rows_deleted = c.rowcount
                if rows_deleted > 0:
                    await message.channel.send(f"Все записи на {date_obj.strftime('%d.%m.%Y')} удалены. All recording on {date_obj.strftime('%d.%m.%Y')} deleted.")
                    await list(message.channel)
                else:
                    await message.channel.send(f"Записей на {date_obj.strftime('%d.%m.%Y')} не найдено. Recording on {date_obj.strftime('%d.%m.%Y')} not found.")
        except ValueError:
            await message.channel.send("Пожалуйста, введите корректное значение. Please enter the correct value.")
        finally:
            conn.close()
    
    await bot.process_commands(message)

@bot.command()
async def pepe(ctx):
    # Используем эмодзи, загруженные через Developer Portal, по ID и имени
    emoji = "<:customemoji:1283695138530656329>"  # Здесь нужно указать реальное имя и ID эмодзи
    
    # Отправляем эмодзи
    await ctx.send(f'{emoji}')
    
    # Удаляем сообщение пользователя с командой
    await ctx.message.delete()

@bot.command()
async def image(ctx):
    # URL изображения
    image_url = "https://i.postimg.cc/g02CYcgR/images-2.jpg"
    
    # Отправка изображения по URL
    await ctx.send(image_url)


@bot.command(name='record', aliases=['запись'])
async def record(ctx, date_str: str, *, info: str):
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
        today = date.today()
        user_id = ctx.author.id

        has_role = any(role.name == 'Гос Дума' for role in ctx.author.roles)

        # Проверка на возможность записи на сегодняшнюю или прошедшую дату
        if date_obj < today:
            await ctx.send("Вы не можете добавить запись на прошедшую дату. You cannot add an entry for a past date.")
            return

        if not has_role and not allow_same_day and date_obj == today:
            await ctx.send("Запись на сегодняшний день запрещена. Recording for today is not allowed.")
            return

        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM reminders WHERE date = ? AND user_id = ?", (date_obj, user_id))
        count = c.fetchone()[0]

        if count > 0 and not has_role:
            await ctx.send("Вы уже добавляли запись на эту дату. Только одна запись на день разрешена. You have already added an entry for this date. Only one entry per day is allowed.")
        else:
            c.execute("INSERT INTO reminders (date, info, user_id) VALUES (?, ?, ?)", (date_obj, info, user_id))
            conn.commit()
            last_id = c.lastrowid
            await ctx.send(f"Запись добавлена на {date_obj.strftime('%d.%m.%Y')} с id {last_id}. Recording added on {date_obj.strftime('%d.%m.%Y')} with id {last_id}.")
        conn.close()

    except ValueError:
        await ctx.send("Неправильный формат даты. Используйте формат ДД.ММ.ГГГГ. The date format is incorrect. Use the format DD.MM.YYYY.")
    except sqlite3.Error as e:
        await ctx.send(f"Ошибка базы данных: {e}. Database error: {e}.")
    except Exception as e:
        await ctx.send(f"Произошла ошибка: {e}. Error: {e}.")

# Команда для изменения флага allow_same_day
@bot.command(name='day', aliases=['день'])
@commands.has_permissions(administrator=True)
async def day(ctx):
    global allow_same_day
    allow_same_day = not allow_same_day
    status = "разрешено/allowed" if allow_same_day else "запрещено/forbidden"
    await ctx.send(f"Запись на сегодняшний день теперь {status}. Recording for today is now {status}.")

@bot.command(name='clearid', aliases=['очиститьайди'])
@commands.has_permissions(administrator=True)
async def clearid(ctx, id: int):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("DELETE FROM reminders WHERE id = ?", (id,))
    if c.rowcount > 0:
        conn.commit()
        await ctx.send(f"Запись с id {id} удалена. Recording with id {id} deleted.")
    else:
        await ctx.send(f"Запись с id {id} не найдена. Recording with id {id} not found.")
    await list(ctx)
    conn.close()

@bot.command(name='info', aliases=['инфо'])
async def info(ctx, date: str):
    try:
        date_obj = datetime.strptime(date, "%d.%m.%Y").date()
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT info FROM reminders WHERE date = ?", (date_obj,))
        rows = c.fetchall()
        conn.close()

        if rows:
            await ctx.send(f"Записи на {date_obj.strftime('%d.%m.%Y')}. Recording for {date_obj.strftime('%d.%m.%Y')}:")
            for row in rows:
                await ctx.send(f"- {row[0]}")
        else:
            await ctx.send(f"На {date_obj.strftime('%d.%m.%Y')} нет записей. For {date_obj.strftime('%d.%m.%Y')} there are no recording.")
    except ValueError:
        await ctx.send("Неправильный формат даты. Используйте формат ДД.ММ.ГГГГ. The date format is incorrect. Use the format DD.MM.YYYY.")

@bot.command(name='clear', aliases=['очистить'])
@commands.has_permissions(administrator=True)
async def clear(ctx):
    button1 = Button(label="Clear ID_Очистить Айди", style=discord.ButtonStyle.danger)
    button2 = Button(label="Clear user_Очистить юзер", style=discord.ButtonStyle.danger)
    button3 = Button(label="Clear date_Очистить дату", style=discord.ButtonStyle.danger)
    button4 = Button(label="Clear list_Очистить список", style=discord.ButtonStyle.danger)

    async def button1_callback(interaction):
        await interaction.response.send_message("Введите ID сообщения. Pls ID messages:")
        waiting_for_input[interaction.user.id] = 'delete_id'

    async def button2_callback(interaction):
        await interaction.response.send_message("Введите ID пользователя. Pls ID user:")
        waiting_for_input[interaction.user.id] = 'delete_user'

    async def button3_callback(interaction):
        await interaction.response.send_message("Введите дату (ДД.ММ.ГГГГ). Pls date (DD.MM.YYYY):")
        waiting_for_input[interaction.user.id] = 'delete_date'

    async def button4_callback(interaction):
        await ctx.invoke(bot.get_command('clearlist'))

    button1.callback = button1_callback
    button2.callback = button2_callback
    button3.callback = button3_callback
    button4.callback = button4_callback

    view = View()
    view.add_item(button1)
    view.add_item(button2)
    view.add_item(button3)
    view.add_item(button4)

    await ctx.send("Что хотите очистить? What to clear?", view=view)

@bot.command(name='clearallid', aliases=['очиститьвсеайди'])
@commands.has_permissions(administrator=True)
async def clearallid(ctx):
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("DELETE FROM reminders")
        conn.commit()
        c.execute("DELETE FROM sqlite_sequence WHERE name='reminders'")
        conn.commit()
        conn.close()
        await ctx.send("Все записи удалены и автоинкрементный счетчик сброшен. All recording deleted and the auto-increment counter has been reset.")
    except sqlite3.Error as e:
        await ctx.send(f"Произошла ошибка: {e}. Error: {e}.")
    await list(ctx)

@bot.command(name='clearuser', aliases=['очиститьюзер'])
@commands.has_permissions(administrator=True)
async def clearuser(ctx, user_id: int):
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("DELETE FROM reminders WHERE user_id = ?", (user_id,))
        conn.commit()
        rows_deleted = c.rowcount
        conn.close()

        if rows_deleted > 0:
            await ctx.send(f"Все записи пользователя с ID {user_id} были удалены. Удалено {rows_deleted} записей. All recording a user with an id {user_id} deleted. Deleted {rows_deleted} recording.")
        else:
            await ctx.send(f"Записей пользователя с ID {user_id} не найдено. Recording a user with an id {user_id} not found.")
        await list(ctx)
    except sqlite3.Error as e:
        await ctx.send(f"Произошла ошибка: {e}")

@bot.command(name='clearlist', aliases=['очиститьсписок'])
@commands.has_permissions(administrator=True)
async def clearlist(ctx):
    try:
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("DELETE FROM reminders")
        conn.commit()
        conn.close()
        await ctx.send("Все записи удалены. All records deleted.")
    except sqlite3.Error as e:
        await ctx.send(f"Произошла ошибка: {e}. Error: {e}.")

    await list(ctx)

    # Создание кнопки для очистки всех ID
    button = Button(label="clear id_очистить айди", style=discord.ButtonStyle.danger)

    async def button1_callback(interaction):
        await ctx.invoke(bot.get_command('clearallid'))
        await interaction.followup.send("Не хотите также очистить все ID? Clear all ID?")
        await list(interaction.channel)  # Show updated list

    button.callback = button1_callback

    # Создание View и добавление кнопки
    view = View()
    view.add_item(button)

    await ctx.send("Не хотите также очистить все ID? Clear all ID?", view=view)

@bot.command(name='list', aliases=['список'])
async def list(ctx):
    conn = get_db_connection()
    c = conn.cursor()
    today = date.today()

    c.execute("SELECT id, date, info FROM reminders ORDER BY date ASC")
    records = c.fetchall()
    
    if not records:
        await ctx.send("Записей пока нет. There are no records")
        conn.close()
        return
    
    entries_by_date = {}
    for record in records:
        record_id, date_obj, info = record
        if isinstance(date_obj, str):
            date_obj = datetime.strptime(date_obj, "%Y-%m-%d").date()
        elif isinstance(date_obj, datetime):
            date_obj = date_obj.date()

        date_str = date_obj.strftime("%d.%m.%Y")
        if date_str not in entries_by_date:
            entries_by_date[date_str] = []
        entries_by_date[date_str].append(f"id {record_id}: {info}")

    all_entries = []
    for record_date in sorted(entries_by_date.keys(), key=lambda d: datetime.strptime(d, "%d.%m.%Y").date()):
        entries = "\n".join(entries_by_date[record_date])
        all_entries.append(f"{record_date}:\n{entries}")

    await ctx.send("\n\n".join(all_entries))
    conn.close()

@bot.command(name='cleardate', aliases=['очиститьдата'])
@commands.has_permissions(administrator=True)
async def cleardate(ctx, date_str: str):
    try:
        # Преобразование введенной даты в объект datetime
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()

        # Установка соединения с базой данных
        conn = get_db_connection()
        c = conn.cursor()

        # Выполнение запроса на удаление записей с введенной датой
        c.execute("DELETE FROM reminders WHERE date = ?", (date_obj,))
        conn.commit()

        # Проверка количества удаленных строк
        rows_deleted = c.rowcount
        conn.close()

        # Сообщение пользователю об успешном удалении записей
        if rows_deleted > 0:
            await ctx.send(f"Все записи на {date_obj.strftime('%d.%m.%Y')} удалены.")
        else:
            await ctx.send(f"На {date_obj.strftime('%d.%м.%Y')} нет записей.")
        
        # Вывод обновленного списка
        await list(ctx)

    except ValueError:
        # Обработка ошибки неправильного формата даты
        await ctx.send("Неправильный формат даты. Используйте формат ДД.ММ.ГГГГ.")
    except sqlite3.Error as e:
        # Обработка ошибки базы данных
        await ctx.send(f"Ошибка базы данных: {e}.")
    


# Запуск бота
bot.run('MTI3OTQ4MjI0ODM1NzIyMDUxOQ.Gi4Uvi.ZDPyU6tGLLzw9l2GPzIvlFHvAwjq0WxwYe8KbQ')